<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="b1964a39-ec10-4353-9efc-c5c7e628a7b3" activeEnvironment="Default" name="REST_Customer_onboard" resourceRoot="" soapui-version="5.4.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="b1880e1e-8034-4c6d-980e-9aac58940bcf" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="Post_data" path="/Post_data" id="e9ad55dd-fceb-447a-beab-db9ff9444397"><con:settings/><con:parameters/><con:method name="customer_onboarding_post" id="5eca90ce-520e-4008-b0bc-fb18a69034c1" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:post="http://localhost/Post_data">post:Response</con:element></con:representation><con:request name="Post_result" id="8857e6c1-fc1e-4d88-b5e3-a977fc7c5ee4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/Post_data</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Get_data" path="/Get_data" id="ee3deaeb-0cd3-43fd-a054-20cd666bbd5d"><con:settings/><con:parameters/><con:method name="customer_onboarding_get" id="ad3af340-9628-484d-9f1c-dfe64a7222b3" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="http://localhost/Get_data">get:Response</con:element></con:representation><con:request name="Get_result" id="5ff25d64-67b0-4e30-982c-fa48971c7ddd" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/Get_data</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="4873869a-ef06-4af1-b8b9-e9e75a6bbc92" port="8080" path="/" host="LAPTOP-KITLQ6A3" name="REST MockService_customer"><con:settings/><con:properties/><con:restMockAction name="customer_onboarding_mock_api_post" method="POST" resourcePath="/Post_data" id="befd450d-2014-4973-9f0b-1833e3f584ae"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Post_data" id="70285bfa-ecd6-431f-9dab-e362ac352970" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:script/><con:responseContent>{"customers": {"customer": [
      {
      "id": "1",
      "name": "Doe",
      "company ": "wipro"
   },
      {
      "id": "2",
      "name": "Doe1",
      "company ": "cts"
   },
      {
      "id": "3",
      "name": "MakDoe",
      "company ": "tcs"
   }
]}}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="customer_onboarding_mock_api_get" method="GET" resourcePath="/Get_data" id="16f315c8-6b88-43b0-afb8-8653e48a0731"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Get_data" id="c0b7155e-239e-40d1-a215-ce9c0a2e7219" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"customers": {"customer": [
      {
      "id": "1",
      "name": "Doe",
      "company ": "wipro"
   },
      {
      "id": "2",
      "name": "Doe1",
      "company ": "cts"
   },
      {
      "id": "3",
      "name": "MakDoe",
      "company ": "tcs"
   }
]}}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>